# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT
structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration
program    ::= (include)* (structdecl)* (vardecl)* (fundecl)* EOF
include    ::= "#include" STRING_LITERAL
vardecl    ::= type IDENT ";"                       # normal declaration, e.g. int a;
             | type IDENT "[" INT_LITERAL "]" ";"   # array declaration, e.g. int a[2];
fundecl    ::= type IDENT "(" params ")" block    # function declaration
params     ::= [ type IDENT ("," type IDENT)* ]
block      ::= "{" (vardecl)* (stmt)* "}"
typecast     ::= "(" type ")" exp                 # type casting
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type
funcall      ::= IDENT "(" [ exp ("," exp)* ] ")"



stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp "=" exp ";"                      # assignment
             | exp ";"                               # expression statement, e.g. a function call


exp        ::=
             | Primary()
             | "-" exp
             | exp (">" | "<" | ">=" | "<=" | "!=" | "==" | "+" | "-" | "/" | "*" | "%" | "||" | "&&") exp  # binary operators
             | arrayaccess | fieldaccess | valueat | funcall | sizeof | typecast

arrayaccess  ::= exp "[" exp "]"                  # array access
fieldaccess  ::= exp "." IDENT                    # structure field member access


